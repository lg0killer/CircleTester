# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@3.4.2

jobs:
  checkouttest:
    machine:
      image: ubuntu-2004:202008-01
      
    steps:
      - checkout
      - run: exit 1
      - slack/notify:
          color: "#42e2f4"
          mentions: "${CIRCLE_USERNAME},"
          message: So this is the Checkout tests notification
      - slack/status:
          fail_only: true
          mentions: "${CIRCLE_USERNAME}"
  
  simplewebsite:
    docker:
      - image: circleci/python:3.8.0-buster
     
    steps:
      - checkout 

      - run: 
          name: Copy Results
          command: |
            mkdir -p ~/phpunit
            cp ./report.xml ~/phpunit/browsertests.xml
            cp ./report.txt ~/phpunit/browsertests.txt
            PASSING=`grep -o -i \\. report.txt | wc -l`
            ERRORS=`grep -o -i E report.txt | wc -l`
            FAILURES=`grep -o -i E report.txt | wc -l`

            echo ${PASSING}

      - store_test_results:
          path: ~/phpunit

      - run: 
          name: Get Failed Results
          command: |
            echo https://circleci.com/api/v1.1/project/github/lg0killer/CircleTester/${CIRCLE_BUILD_NUM}/tests
            curl https://circleci.com/api/v1.1/project/github/lg0killer/CircleTester/${CIRCLE_BUILD_NUM}/tests -H "Circle-Token: ${CIRLCE_API_KEY}"

            PASSING=`grep -o -i \\. ~/phpunit/browsertests.txt | wc -l`
            ERRORS=`grep -o -i E ~/phpunit/browsertests.txt | wc -l`
            FAILURES=`grep -o -i E ~/phpunit/browsertests.txt | wc -l`

            echo ${PASSING}
          when: on_fail

      - run: 
          name: Get Success Results
          command: |
            only_for_branches="master,release,feature/circleci,circleci-project-setup"


            generate_post_data()
            {
              cat \<<EOF
              {
                "blocks": [
                  {
                    "type": "header",
                    "text": {
                      "type": "plain_text",
                      "text": "Job Passed. :tada:",
                      "emoji": true
                    }
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Job*: ${CIRCLE_JOB}"
                      }
                    ]
                  },
                  {
                    "type": "section",
                    "fields": [
                      {
                        "type": "mrkdwn",
                        "text": "*Project*:\\n$CIRCLE_PROJECT_REPONAME"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Branch*:\\n$CIRCLE_BRANCH"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Author*:\\n$CIRCLE_USERNAME"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Passing*:\\n$PASSING"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*ERRORS*:\\n$TOTAL_FAILURES"
                      },
                      {
                        "type": "mrkdwn",
                        "text": "*Total Tests*:\\n$TOTAL_TESTS"
                      }
                    ]
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "View Job"
                        },
                        "url": "${CIRCLE_BUILD_URL}"
                      }
                    ]
                  }
                ]
              }
            EOF
            }


            IFS=', ' read -r -a branches \<<< "$only_for_branches"

            for branch in "${branches[@]}"
            do
                if [ $branch = ${CIRCLE_BRANCH} ]
                then
                  echo "Getting Total tests"
                  TOTAL_TESTS=`cat ~/phpunit/browsertests.txt | cut -d' ' -f1 | grep -o -i \. | wc -l || expr 0`
                  
                  echo "Getting Error tests"
                  ERRORS=`grep -o -i E ~/phpunit/browsertests.txt | wc -l` || ERRORS=0

                  echo "Getting Failed tests"
                  FAILS=`grep -o -i F ~/phpunit/browsertests.txt | wc -l` || FAILS=50
                  echo "Total $FAILS"

                  echo "Calculating totat failures"
                  TOTAL_FAILURES=$(($FAILS+$ERRORS))

                  echo "Getting Passed tests"
                  PASSING=$(($TOTAL_TESTS-$TOTAL_FAILURES))

                  curl --location --request POST "${SLACK_WEBHOOK}" --header 'Content-Type: application/json' --data "$(generate_post_data)"

                  break
                fi
            done
          when: on_success

      # - slack/notify:
      #     color: "#42e2f4"
      #     mentions: "${CIRCLE_USERNAME},"
      #     message: A custom message to notify the channel about the latest build. ${PASSING} passed, ${FAILURES} failed, ${ERRORS} errors.
      # - slack/status:
      #     fail_only: true
      #     mentions: "${CIRCLE_USERNAME}"


# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - checkouttest:
          context: slack-secrets
      - simplewebsite
